package exam.Kosademo.controller;

import org.springframework.core.io.ClassPathResource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;

import java.io.*;
import java.nio.charset.StandardCharsets;

@Controller
@RequestMapping("/api")
public class shellTest {

    @Value("${aws.s3.bucket.name}")
    private String s3BucketName;

    private final S3Client s3Client;

    public shellTest(S3Client s3Client) {
        this.s3Client = s3Client;
    }

    @GetMapping("/json")
    public String generateJson(RedirectAttributes redirectAttributes) {
        File scriptFile = null;
        try {
            // 쉘 스크립트 위치를 classpath에서 찾기
            ClassPathResource resource = new ClassPathResource("CentOS6.sh");
            scriptFile = File.createTempFile("CentOS6", ".sh");
            scriptFile.deleteOnExit();
            try (InputStream is = resource.getInputStream();
                 FileOutputStream fos = new FileOutputStream(scriptFile)) {
                byte[] buffer = new byte[1024];
                int length;
                while ((length = is.read(buffer)) > 0) {
                    fos.write(buffer, 0, length);
                }
            }

            // 쉘 스크립트에 실행 권한 부여
            scriptFile.setExecutable(true);

            // 리소스 파일의 경로를 출력
            System.out.println("Resource Script Path: " + resource.getPath());
            // 실제 실행 파일의 경로를 출력
            System.out.println("Executable Script Path: " + scriptFile.getAbsolutePath());

            // Git Bash를 사용하여 쉘 스크립트 실행
            String scriptPath = scriptFile.getAbsolutePath().replace("\\", "/");
            ProcessBuilder processBuilder = new ProcessBuilder(
                    "C:\\Program Files\\Git\\bin\\bash.exe", scriptPath);
            processBuilder.redirectErrorStream(true); // 표준 오류를 표준 출력으로 리다이렉트
            Process process = processBuilder.start();

            // 프로세스 출력 로그 읽기
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    System.out.println("Process Output: " + line);
                }
            }

            // 프로세스 오류 로그 읽기
            try (BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream(), StandardCharsets.UTF_8))) {
                String errorLine;
                while ((errorLine = errorReader.readLine()) != null) {
                    System.err.println("Process Error: " + errorLine);
                }
            }

            int exitCode = process.waitFor();
            if (exitCode != 0) {
                System.err.println("Process exited with error code: " + exitCode);
            }

            // JSON 파일 생성된 후 S3에 업로드
            File jsonFile = new File("result.json");
            if (!jsonFile.exists()) {
                System.err.println("JSON file not found: " + jsonFile.getAbsolutePath());
                redirectAttributes.addFlashAttribute("errorMessage", "JSON 파일이 생성되지 않았습니다.");
                return "redirect:/error";
            }

            uploadToS3(jsonFile);

            redirectAttributes.addFlashAttribute("successMessage", "JSON 파일이 성공적으로 생성되고 S3에 업로드되었습니다.");
            return "shellTest";
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
            redirectAttributes.addFlashAttribute("errorMessage", "오류가 발생했습니다. JSON 파일 생성 또는 S3 업로드 실패.");
            return "redirect:/error";
        } finally {
            if (scriptFile != null && scriptFile.exists()) {
                scriptFile.delete(); // 작업이 끝난 후 파일 삭제
            }
        }
    }

    private void uploadToS3(File file) {
        String keyName = "results/result.json"; // S3에 저장될 키
        s3Client.putObject(PutObjectRequest.builder()
                .bucket(s3BucketName)
                .key(keyName)
                .build(), file.toPath());
    }
}
